{
	// Place your OrthogonalFramework workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Globals": {
		"scope": "lua,luau",
		"prefix": "globals",
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"",
			"local Globals = require(ReplicatedStorage.Shared.Globals)"
		],
		"description": "Create the Globals + Replicated Storage variable for easy file creation."
	},
	"NewModule": {
		"scope": "lua,luau",
		"prefix": "newmod",
		"body": [
			"local $1 = {}",
			"",
			"function $1:GameInit()",
			"\t--Prestart Code",
			"end",
			"",
			"function $1:GameStart()",
			"\t--Start Code",
			"end",
			"",
			"return $1"
		],
		"description": "Generic Service/Controller boiler plate code."
	},
	"package": {
		"scope": "lua,luau",
		"prefix": "package",
		"body": [
			"local $1 = require(Globals.Packages.$1)"
		],
		"description": "Shortcut for requiring packages, Requires Globals above it."
	}
}